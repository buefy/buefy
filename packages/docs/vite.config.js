import * as fs from 'node:fs'
import * as path from 'node:path'
import * as util from 'node:util'
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import commonjs from 'vite-plugin-commonjs'

const readFile = util.promisify(fs.readFile)

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [
    vue(),
    commonjs({
      filter(id) {
        // JS files in
        // `src/pages/extensions/bulma-css-vars/examples/bulma-generated/`
        // are in the CommonJS format
        // we should not directly edit them because they are supposed to be
        // generated by `bulma-css-vars`
        if (id.includes('bulma-generated/')) {
          return true
        }
      }
    }),
    {
      // For development:
      //
      // patches access to `Color` in `bulma-css-vars`
      //
      //   `Color` → `Color.default`
      //
      // `color` is imported in `bulma-css-vars` as
      //
      //   import * as Color from 'color'
      //
      //   (https://github.com/wtho/bulma-css-vars/blob/892baa8dad6c5082367159c2605853d6a7973b51/lib/src/bulma-color-tools.ts#L1)
      //
      // this causes a compatibility issue between TypeScript and Vite (esbuild)
      // `Color` is a function in TypeScript, while it is an object like the
      // following in esbuild:
      //
      //   {
      //     default: function () { /* expected implementation of Color */ }
      //   }
      //
      // to call the expected function in esbuild, we have to extract `default`
      // from `Color`.
      //
      // it seems Vite bypasses `load` hooks for `node_modules` in development
      // mode, so we have to transform the results of esbuild
      name: 'transform-bulma-css-vars',
      transform(src, id) {
        if (id.includes('.vite/deps/bulma-css-vars.js')) {
          const transformed = src.replace(/(\W)Color\(/g, '$1Color.default(')
          return {
            code: transformed,
            map: null
          }
        }
      }
    },
    {
      // For production:
      //
      // while esbuild is used in development mode, @rollup/plugin-commonjs is
      // used in production mode. so we need a different plugin for production
      //
      // patches `bulma-color-tools.js` in `bulma-css-vars`
      //
      //   import * as Color from 'color'
      //     ↓
      //   import Color from 'color'
      //
      // this is the correct way to import the default export in non-TypeScript
      name: 'load-bulma-css-vars',
      async load(id) {
        if (id.includes('bulma-css-vars')
          && id.endsWith('bulma-color-tools.js'))
        {
          const src = await readFile(id, 'utf8')
          const replaced = src.replace(
            'import * as Color from \'color\'',
            'import Color from \'color\'',
          )
          return replaced
        }
      },
    },
    {
      // replaces `@ntohq/buefy-next` with the path to the source code
      // // in development to ease debugging
      name: 'link-buefy-next-src',
      apply: 'serve', // development only
      resolveId: {
        order: 'pre', // otherwise, IDs become "plugin-vue:export-helper"
        handler(id) {
          if (id === '@ntohq/buefy-next') {
            return path.resolve(__dirname, '../buefy-next/src/index.ts')
          }
        },
      },
    },
  ],
  resolve: {
    alias: {
      // we need the Vue runtime including the template compiler
      'vue': 'vue/dist/vue.esm-bundler.js',
      '@/': `${path.resolve(__dirname, 'src')}/`,
    },
    extensions: ['.vue', '.js', '.ts', '.json']
  }
})
